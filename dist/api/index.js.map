{"version":3,"sources":["../../src/api/index.js"],"names":["config","db","api","use","get","req","res","json","version","q","query","params","city","toUpperCase","state","err","data","i","length","school_nm","titleCase","output","push","mailing_state","jsonOut","send","str","toLowerCase","split","map","word","charAt","slice","join"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;;;kBAEe,gBAAoB;AAAA,KAAjBA,MAAiB,QAAjBA,MAAiB;AAAA,KAATC,EAAS,QAATA,EAAS;;AAClC,KAAIC,MAAM,sBAAV;;AAEA;AACAA,KAAIC,GAAJ,CAAQ,SAAR,EAAmB,sBAAO,EAAEH,cAAF,EAAUC,MAAV,EAAP,CAAnB;;AAEA;AACAC,KAAIE,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC1BA,MAAIC,IAAJ,CAAS,EAAEC,yBAAF,EAAT;AACA,EAFD;;AAIAN,KAAIE,GAAJ,CAAQ,wBAAR,EAAkC,UAACC,GAAD,EAAMC,GAAN,EAAc;;AAE/C,MAAIG,6MAAJ;;AAQAR,KAAGS,KAAH,CAASD,CAAT,EAAW,CAAEJ,IAAIM,MAAJ,CAAWC,IAAX,CAAgBC,WAAhB,EAAF,EAAiCR,IAAIM,MAAJ,CAAWG,KAAX,CAAiBD,WAAjB,EAAjC,CAAX,EAA8E,UAACE,GAAD,EAAMC,IAAN,EAAe;AAC5F,OAAID,GAAJ,EAAS;AACRT,QAAIC,IAAJ,CAASQ,GAAT;AACA,IAFD,MAEO;AACNT,QAAIC,IAAJ,CAASS,IAAT;AACA;AACD,GAND;AAOA,EAjBD;;AAmBAd,KAAIE,GAAJ,CAAQ,uBAAR,EAAiC,UAACC,GAAD,EAAMC,GAAN,EAAc;;AAE9C,MAAIG,iWAAJ;;AAWAR,KAAGS,KAAH,CAASD,CAAT,EAAW,CAAEJ,IAAIM,MAAJ,CAAWC,IAAX,CAAgBC,WAAhB,EAAF,EAAiCR,IAAIM,MAAJ,CAAWG,KAAX,CAAiBD,WAAjB,EAAjC,CAAX,EAA8E,UAACE,GAAD,EAAMC,IAAN,EAAe;AAC5F,OAAID,GAAJ,EAAS;AACRT,QAAIC,IAAJ,CAASQ,GAAT;AACA,IAFD,MAEO;AACN,SAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAID,KAAKE,MAAzB,EAAiCD,GAAjC,EAAsC;AACrCD,UAAKC,CAAL,EAAQE,SAAR,GAAoBC,UAAUJ,KAAKC,CAAL,EAAQE,SAAlB,CAApB;AACA;AACDb,QAAIC,IAAJ,CAASS,IAAT;AACA;AACD,GATD;AAUA,EAvBD;;AAyBAd,KAAIE,GAAJ,CAAQ,SAAR,EAAmB,UAACC,GAAD,EAAMC,GAAN,EAAc;;AAEhC,MAAIG,IAAI,iFAAR;;AAEAR,KAAGS,KAAH,CAASD,CAAT,EAAY,UAACM,GAAD,EAAMC,IAAN,EAAe;AAC1B,OAAID,GAAJ,EAAS;AACRT,QAAIC,IAAJ,CAASQ,GAAT;AACA,IAFD,MAEO;AACN,QAAIC,IAAJ,EAAU;AACT,SAAIK,SAAS,EAAb;AACA,UAAK,IAAIJ,IAAI,CAAb,EAAgBA,IAAID,KAAKE,MAAzB,EAAiCD,GAAjC,EAAsC;AACrCI,aAAOC,IAAP,CAAYN,KAAKC,CAAL,EAAQM,aAApB;AACA;AACD,SAAIC,UAAU;AACb,gBAAUH;AADG,MAAd;AAGAf,SAAIC,IAAJ,CAASiB,OAAT;AACA,KATD,MASO;AACNlB,SAAImB,IAAJ,CAAS,eAAT;AACA;AAGD;AACD,GAnBD;AAoBA,EAxBD;AAyBA,QAAOvB,GAAP;AACA,C;;AAED,SAASkB,SAAT,CAAmBM,GAAnB,EAAwB;AACvB,QAAOA,IAAIC,WAAJ,GAAkBC,KAAlB,CAAwB,GAAxB,EAA6BC,GAA7B,CAAiC,UAASC,IAAT,EAAe;AACrD,SAAQA,KAAKC,MAAL,CAAY,CAAZ,EAAelB,WAAf,KAA+BiB,KAAKE,KAAL,CAAW,CAAX,CAAvC;AACD,EAFM,EAEJC,IAFI,CAEC,GAFD,CAAP;AAGE","file":"index.js","sourcesContent":["import { version } from '../../package.json';\r\nimport { Router } from 'express';\r\nimport facets from './facets';\r\n\r\nexport default ({ config, db }) => {\r\n\tlet api = Router();\r\n\r\n\t// mount the facets resource\r\n\tapi.use('/facets', facets({ config, db }));\r\n\r\n\t// perhaps expose some API metadata at the root\r\n\tapi.get('/', (req, res) => {\r\n\t\tres.json({ version });\r\n\t});\r\n\r\n\tapi.get('/colleges/:state/:city', (req, res) => {\r\n\t\t\r\n\t\tlet q = `SELECT a.inst_id, a.inst_nm \r\n\t\tFROM base_college_base a\r\n\t\tjoin base_college_location b\r\n\t\ton a.inst_id = b.inst_id\r\n\t\twhere b.mailing_city=?\r\n\t\tand b.mailing_state=?\r\n\t\torder by inst_nm`\r\n\r\n\t\tdb.query(q,[ req.params.city.toUpperCase(), req.params.state.toUpperCase() ], (err, data) => {\r\n\t\t\tif (err) {\r\n\t\t\t\tres.json(err);\r\n\t\t\t} else {\r\n\t\t\t\tres.json(data);\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\r\n\tapi.get('/schools/:state/:city', (req, res) => {\r\n\t\t\r\n\t\tlet q = `SELECT a.school_id, school_nm \r\n\t\tFROM base_school_def a\r\n\t\tjoin base_school_location b\r\n\t\ton a.school_id = b.school_id\r\n\t\tjoin base_school_grades_offered c\r\n\t\ton a.school_id = c.school_id\r\n\t\twhere c.g_highest_offered in ('12', '13', 'UG', 'AE')\r\n\t\tand UPPER(location_city)=?\r\n\t\tand location_state=?\r\n\t\torder by school_nm`\r\n\r\n\t\tdb.query(q,[ req.params.city.toUpperCase(), req.params.state.toUpperCase() ], (err, data) => {\r\n\t\t\tif (err) {\r\n\t\t\t\tres.json(err);\r\n\t\t\t} else {\r\n\t\t\t\tfor (let i = 0; i < data.length; i++) {\r\n\t\t\t\t\tdata[i].school_nm = titleCase(data[i].school_nm);\r\n\t\t\t\t}\r\n\t\t\t\tres.json(data);\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\r\n\tapi.get('/states', (req, res) => {\r\n\r\n\t\tlet q = \"select distinct mailing_state from base_college_location order by mailing_state\"\r\n\r\n\t\tdb.query(q, (err, data) => {\r\n\t\t\tif (err) {\r\n\t\t\t\tres.json(err)\r\n\t\t\t} else {\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tlet output = [];\r\n\t\t\t\t\tfor (let i = 0; i < data.length; i++) {\r\n\t\t\t\t\t\toutput.push(data[i].mailing_state);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet jsonOut = {\r\n\t\t\t\t\t\t'states': output\r\n\t\t\t\t\t}\r\n\t\t\t\t\tres.json(jsonOut);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tres.send('No data found')\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});\r\n\t})\r\n\treturn api;\r\n}\r\n\r\nfunction titleCase(str) {\r\n\treturn str.toLowerCase().split(' ').map(function(word) {\r\n\t  return (word.charAt(0).toUpperCase() + word.slice(1));\r\n\t}).join(' ');\r\n  }\r\n"]}